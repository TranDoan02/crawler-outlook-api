from fastapi import FastAPI, Request, HTTPException, Depends, BackgroundTasks
from fastapi.responses import RedirectResponse, JSONResponse, StreamingResponse
import requests
import os
import json
from datetime import datetime, timedelta
from urllib.parse import urlencode
from typing import Optional
from sqlalchemy.orm import Session

# Import database v√† models
from database import get_db, create_tables, engine
from models import Account, AuthToken, Email, EmailAttachment
from crud import (
    save_user_and_token_to_db, 
    get_account_by_email, 
    get_account_by_id,
    get_valid_auth_token,
    create_email,
    get_emails,
    get_email_by_message_id,
    search_emails,
    update_auth_token
)

import io
import pandas as pd
import re

app = FastAPI()

CLIENT_ID = "b6239e39-c5f9-4704-ac0d-bcb0e0dc87b6"
CLIENT_SECRET = "cOb8Q~KsEr2B.UpGCBxp5Sqcs6JnBs~Osc_~fa4B"
REDIRECT_URI = "http://localhost:8000/auth/callback"
AUTHORITY = "https://login.microsoftonline.com/consumers"  # Cho t√†i kho·∫£n c√° nh√¢n
SCOPE = ["offline_access", "Mail.Read"]  # offline_access ƒë·ªÉ l·∫•y refresh_token
GRAPH_API_BASE = "https://graph.microsoft.com/v1.0"

def refresh_access_token(db: Session, account_id: int):
    """Refresh access token khi h·∫øt h·∫°n"""
    try:
        auth_token = get_valid_auth_token(db, account_id)
        if not auth_token:
            raise HTTPException(status_code=401, detail="No valid token found")
        
        token_url = f"{AUTHORITY}/oauth2/v2.0/token"
        data = {
            "client_id": CLIENT_ID,
            "scope": " ".join(SCOPE),
            "refresh_token": auth_token.refresh_token,
            "grant_type": "refresh_token",
            "client_secret": CLIENT_SECRET
        }
        
        response = requests.post(token_url, data=data)
        if response.status_code != 200:
            raise HTTPException(status_code=401, detail="Failed to refresh token")
        
        token_data = response.json()
        
        # C·∫≠p nh·∫≠t token trong database
        update_auth_token(db, auth_token.id, 
                        access_token=token_data['access_token'],
                        refresh_token=token_data['refresh_token'],
                        expires_in=token_data['expires_in'],
                        expires_at=datetime.utcnow() + timedelta(seconds=token_data['expires_in']))
        
        return token_data['access_token']
    except Exception as e:
        print(f"üîç DEBUG: Error refreshing token: {e}")
        raise HTTPException(status_code=500, detail=str(e))

def get_valid_access_token(db: Session, account_id: int):
    """L·∫•y access token h·ª£p l·ªá"""
    try:
        auth_token = get_valid_auth_token(db, account_id)

        if not auth_token:
            raise HTTPException(status_code=401, detail="No access token available")

        # Ki·ªÉm tra xem token c√≥ h·∫øt h·∫°n kh√¥ng
        if datetime.utcnow() >= auth_token.expires_at:
            return refresh_access_token(db, account_id)

        return auth_token.access_token
    except Exception as e:
        print(f"üîç DEBUG: Error getting access token: {e}")
        raise HTTPException(status_code=500, detail=str(e))

def extract_meta_receipt_info(body_html: str) -> dict:
    """
    Tr√≠ch xu·∫•t th√¥ng tin t·ª´ body HTML c·ªßa email Meta receipt.
    """
    meta_info = {}
    # T√¨m c√°c m·∫´u ch·ª©a th√¥ng tin c·∫ßn tr√≠ch xu·∫•t
    # V√≠ d·ª•: "Account ID: 123456789" ho·∫∑c "Transaction ID: 987654321"
    account_id_match = re.search(r"Account ID: (\d+)", body_html)
    if account_id_match:
        meta_info['account_id'] = account_id_match.group(1)

    transaction_id_match = re.search(r"Transaction ID: (\d+)", body_html)
    if transaction_id_match:
        meta_info['transaction_id'] = transaction_id_match.group(1)

    payment_match = re.search(r"Payment: (\d+)", body_html)
    if payment_match:
        meta_info['payment'] = payment_match.group(1)

    card_number_match = re.search(r"Card Number: (\d+)", body_html)
    if card_number_match:
        meta_info['card_number'] = card_number_match.group(1)

    reference_number_match = re.search(r"Reference Number: (\d+)", body_html)
    if reference_number_match:
        meta_info['reference_number'] = reference_number_match.group(1)

    return meta_info

@app.get("/login")
def login():
    """
    T·∫°o URL ƒë·ªÉ user ƒëƒÉng nh·∫≠p Microsoft
    """
    query_params = urlencode({
        "client_id": CLIENT_ID,
        "response_type": "code",
        "redirect_uri": "http://localhost:8000/auth/callback",
        "response_mode": "query",
        "scope": "offline_access Mail.Read User.Read"
    })
    auth_url = f"https://login.microsoftonline.com/common/oauth2/v2.0/authorize?{query_params}"
    
    return JSONResponse({
        "login_url": auth_url,
        "message": "Truy c·∫≠p URL n√†y ƒë·ªÉ ƒëƒÉng nh·∫≠p Microsoft"
    })

@app.get("/auth/callback")
def callback(code: str, db: Session = Depends(get_db)):
    token_url = "https://login.microsoftonline.com/common/oauth2/v2.0/token"
    
    data = {
        "client_id": CLIENT_ID,
        "scope": "offline_access Mail.Read User.Read",
        "code": code,
        "redirect_uri": "http://localhost:8000/auth/callback",
        "grant_type": "authorization_code",
        "client_secret": CLIENT_SECRET
    }

    response = requests.post(token_url, data=data)
    token_data = response.json()

    if response.status_code != 200:
        raise HTTPException(status_code=400, detail="Failed to get access token")

    access_token = token_data["access_token"]
    refresh_token = token_data["refresh_token"]
    expires_in = token_data["expires_in"]

    # L·∫•y info user
    headers = {"Authorization": f"Bearer {access_token}"}
    me_response = requests.get("https://graph.microsoft.com/v1.0/me", headers=headers)
    if me_response.status_code != 200:
        raise HTTPException(status_code=400, detail="Failed to get user info")
    
    me = me_response.json()
    email = me["userPrincipalName"]
    name = me.get("displayName", "")

    # L∆∞u v√†o database
    account, auth_token = save_user_and_token_to_db(
        db, email, name, access_token, refresh_token, expires_in, me
    )
    
    return {"message": "Th√™m t√†i kho·∫£n th√†nh c√¥ng!", "email": email, "account_id": account.id}


@app.get("/mails")
def get_mails(
    account_id: int,
    top: Optional[int] = 10,
    skip: Optional[int] = 0,
    is_read: Optional[bool] = None,
    has_attachments: Optional[bool] = None,
    subject_filter: Optional[str] = None,
    db: Session = Depends(get_db)
):
    """
    L·∫•y danh s√°ch email t·ª´ database
    - account_id: ID c·ªßa t√†i kho·∫£n
    - top: S·ªë l∆∞·ª£ng email t·ªëi ƒëa (m·∫∑c ƒë·ªãnh 10)
    - skip: S·ªë email b·ªè qua (cho ph√¢n trang)
    - is_read: L·ªçc theo tr·∫°ng th√°i ƒë·ªçc
    - has_attachments: L·ªçc theo c√≥ file ƒë√≠nh k√®m
    - subject_filter: L·ªçc theo ti√™u ƒë·ªÅ (v√≠ d·ª•: "Your Meta ads receipt")
    """
    try:
        # L·∫•y emails t·ª´ database
        emails = get_emails(db, account_id, skip, top, is_read, has_attachments)
        
        # Chuy·ªÉn ƒë·ªïi th√†nh dict ƒë·ªÉ serialize
        email_list = []
        for email in emails:
            email_dict = {
                "id": email.id,
                "message_id": email.message_id,
                "subject": email.subject,
                "from": {
                    "emailAddress": {
                        "address": email.from_email,
                        "name": email.from_name
                    }
                },
                "receivedDateTime": email.received_date_time.isoformat() if email.received_date_time else None,
                "isRead": email.is_read,
                "hasAttachments": email.has_attachments,
                "bodyPreview": email.body_preview,
                "importance": email.importance,
                "created_at": email.created_at.isoformat(),
                "updated_at": email.updated_at.isoformat()
            }
            email_list.append(email_dict)
        
        return JSONResponse({
            "emails": email_list,
            "total": len(email_list),
            "skip": skip,
            "top": top
        })
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/mails/{message_id}")
def get_mail_detail(
    account_id: int,
    message_id: str,
    db: Session = Depends(get_db)
):
    """
    L·∫•y chi ti·∫øt m·ªôt email c·ª• th·ªÉ t·ª´ database
    """
    try:
        # L·∫•y email t·ª´ database
        email = get_email_by_message_id(db, account_id, message_id)
        
        if not email:
            raise HTTPException(status_code=404, detail="Email not found")
        
        # Chuy·ªÉn ƒë·ªïi th√†nh dict ƒë·ªÉ serialize
        email_detail = {
            "id": email.id,
            "message_id": email.message_id,
            "subject": email.subject,
            "from": {
                "emailAddress": {
                    "address": email.from_email,
                    "name": email.from_name
                }
            },
            "toRecipients": email.to_recipients,
            "ccRecipients": email.cc_recipients,
            "bccRecipients": email.bcc_recipients,
            "receivedDateTime": email.received_date_time.isoformat() if email.received_date_time else None,
            "sentDateTime": email.sent_date_time.isoformat() if email.sent_date_time else None,
            "isRead": email.is_read,
            "hasAttachments": email.has_attachments,
            "body": {
                "content": email.body,
                "contentType": "html"
            },
            "bodyPreview": email.body_preview,
            "importance": email.importance,
            "conversationId": email.conversation_id,
            "conversationIndex": email.conversation_index,
            "flag": {
                "flagStatus": email.flag_status
            } if email.flag_status else None,
            "categories": email.categories,
            "attachments": email.attachments,
            "created_at": email.created_at.isoformat(),
            "updated_at": email.updated_at.isoformat()
        }
        
        return JSONResponse(email_detail)
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/mails/sync/")
def sync_emails(
    account_id: int,
    top: Optional[int] = 50,
    received_from: Optional[str] = None,  # ƒê·ªãnh d·∫°ng yyyy-mm-dd
    received_to: Optional[str] = None,    # ƒê·ªãnh d·∫°ng yyyy-mm-dd
    db: Session = Depends(get_db)
):
    """
    ƒê·ªìng b·ªô email t·ª´ Microsoft Graph API v√†o database
    Cho ph√©p filter: kho·∫£ng ng√†y nh·∫≠n, ng∆∞·ªùi g·ª≠i, ti√™u ƒë·ªÅ b·∫Øt ƒë·∫ßu b·∫±ng...
    Ngo√†i ra, xu·∫•t ra file Excel c√°c tr∆∞·ªùng ƒë√£ tr√≠ch xu·∫•t t·ª´ email Meta receipt.
    """
    print(f"üîç DEBUG: sync_emails called with account_id={account_id}, top={top}, received_from={received_from}, received_to={received_to}")
    
    try:
        print(f"üîç DEBUG: Getting access token for account_id={account_id}")
        # L·∫•y access token
        access_token = get_valid_access_token(db, account_id)
        print(f"üîç DEBUG: Got access token successfully")
        
        headers = {
            "Authorization": f"Bearer {access_token}",
            "Content-Type": "application/json"
        }
        
        # Build filter string
        filters = []
        # if subject_startswith:
        #     filters.append("startswith(subject, '{}')".format(subject_startswith.replace("'", "''")))
        # if from_email:
        #     filters.append("from/emailAddress/address eq '{}'".format(from_email.replace("'", "''")))
        if received_from:
            filters.append(f"receivedDateTime ge {received_from}T00:00:00Z")
        if received_to:
            filters.append(f"receivedDateTime le {received_to}T23:59:59Z")
        filter_str = None
        if filters:
            filter_str = ' and '.join(filters)
        
        params = {
            "$top": top,
            "$select": "id,subject,from,toRecipients,ccRecipients,bccRecipients,receivedDateTime,sentDateTime,isRead,hasAttachments,body,bodyPreview,importance,conversationId,conversationIndex,flag,categories,attachments",
        }
        if filter_str:
            params["$filter"] = filter_str
        
        response = requests.get(
            f"{GRAPH_API_BASE}/me/messages",
            headers=headers,
            params=params
        )
        
        if response.status_code != 200:
            raise HTTPException(status_code=response.text, detail="Failed to fetch emails from Microsoft Graph")
        
        emails_data = response.json()
        synced_count = 0
        meta_receipt_rows = []  # List ch·ª©a c√°c dict ƒë·ªÉ xu·∫•t Excel
        print(emails_data.get("value", []))
        # L∆∞u t·ª´ng email v√†o database
        for email_data in emails_data.get("value", []):
            email_id = email_data.get("id")
            # Ki·ªÉm tra xem email ƒë√£ t·ªìn t·∫°i trong db ch∆∞a
            existing_email = db.query(Email).filter_by(account_id=account_id, message_id=email_id).first()
            if existing_email:
                print(f"‚ö†Ô∏è Email already exists in DB: {email_data.get('subject', 'No subject')} (id: {email_id})")
                continue
            try:
                subject = email_data.get("subject", "")
                # N·∫øu kh√¥ng truy·ªÅn subject_startswith th√¨ ch·ªâ l∆∞u c√°c mail Meta ads receipt nh∆∞ c≈©
                # if subject_startswith:
                #     create_email(db, account_id, email_data)
                #     synced_count += 1
                #     print(f"‚úÖ Synced email: {subject if subject else 'No subject'}")
                # else:
                if subject.startswith("Your Meta ads receipt") or subject.startswith("Bi√™n lai qu·∫£ng c√°o Meta c·ªßa b·∫°n"):
                    # Tr√≠ch xu·∫•t th√¥ng tin t·ª´ body
                    body_html = email_data.get('body', {}).get('content', '')
                    meta_info = extract_meta_receipt_info(body_html)
                    # L·∫•y ng√†y nh·∫≠n mail
                    received_date = email_data.get('receivedDateTime')
                    meta_info['Date'] = received_date
                    meta_receipt_rows.append({
                        'Date': received_date,
                        'account_id': meta_info.get('account_id'),
                        'transaction_id': meta_info.get('transaction_id'),
                        'payment': meta_info.get('payment'),
                        'card_number': meta_info.get('card_number'),
                        'reference_number': meta_info.get('reference_number')
                    })
                    print(f"[Meta Receipt Info] {meta_info}")
                    create_email(db, account_id, email_data)
                    synced_count += 1
                    print(f"‚úÖ Synced email: {subject if subject else 'No subject'}")
            except Exception as e:
                print(f"Error saving email {email_id}: {str(e)}")
                continue
        # N·∫øu c√≥ d·ªØ li·ªáu Meta receipt, xu·∫•t ra file Excel v√† tr·∫£ v·ªÅ
        # if meta_receipt_rows:
        #     df = pd.DataFrame(meta_receipt_rows)
        #     # ƒê·ªïi t√™n c·ªôt n·∫øu c·∫ßn cho ƒë√∫ng format m·∫´u
        #     df = df[['Date', 'account_id', 'transaction_id', 'payment', 'card_number', 'reference_number']]
        #     output = io.BytesIO()
        #     with pd.ExcelWriter(output, engine='openpyxl') as writer:
        #         df.to_excel(writer, index=False, sheet_name='Meta Receipts')
        #     output.seek(0)
        #     return StreamingResponse(
        #         output,
        #         media_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        #         headers={
        #             'Content-Disposition': f'attachment; filename="meta_receipts.xlsx"'
        #         }
        #     )
        # N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu, tr·∫£ v·ªÅ JSON nh∆∞ c≈©
        return JSONResponse({
            "message": f"ƒê·ªìng b·ªô th√†nh c√¥ng {synced_count} email",
            "synced_count": synced_count,
            "total_fetched": len(emails_data.get("value", [])),
            "filter": filter_str or "Meta ads receipt emails only"
        })
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/mails/sync-all/")
def sync_all_emails(
    account_id: int,
    top: Optional[int] = 50,
    db: Session = Depends(get_db)
):
    """
    ƒê·ªìng b·ªô t·∫•t c·∫£ email t·ª´ Microsoft Graph API v√†o database (kh√¥ng filter)
    """
    print(f"üîç DEBUG: sync_all_emails called with account_id={account_id}, top={top}")
    
    try:
        print(f"üîç DEBUG: Getting access token for account_id={account_id}")
        # L·∫•y access token
        access_token = get_valid_access_token(db, account_id)
        print(f"üîç DEBUG: Got access token successfully")
        
        headers = {
            "Authorization": f"Bearer {access_token}",
            "Content-Type": "application/json"
        }
        
        # G·ªçi Microsoft Graph API ƒë·ªÉ l·∫•y t·∫•t c·∫£ emails
        params = {
            "$top": top,
            "$orderby": "receivedDateTime desc",
            "$select": "id,subject,from,toRecipients,ccRecipients,bccRecipients,receivedDateTime,sentDateTime,isRead,hasAttachments,body,bodyPreview,importance,conversationId,conversationIndex,flag,categories,attachments"
        }
        
        response = requests.get(
            f"{GRAPH_API_BASE}/me/messages",
            headers=headers,
            params=params
        )
        
        if response.status_code != 200:
            raise HTTPException(status_code=response.status_code, detail="Failed to fetch emails from Microsoft Graph")
        
        emails_data = response.json()
        synced_count = 0
        
        # L∆∞u t·ª´ng email v√†o database
        for email_data in emails_data.get("value", []):
            try:
                create_email(db, account_id, email_data)
                synced_count += 1
            except Exception as e:
                print(f"Error saving email {email_data.get('id')}: {str(e)}")
                continue
        
        return JSONResponse({
            "message": f"ƒê·ªìng b·ªô th√†nh c√¥ng {synced_count} email",
            "synced_count": synced_count,
            "total_fetched": len(emails_data.get("value", [])),
            "filter": "All emails"
        })
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/mails/unread/")
def get_unread_mails(
    account_id: int,
    top: Optional[int] = 10, 
    skip: Optional[int] = 0,
    db: Session = Depends(get_db)
):
    """
    L·∫•y danh s√°ch email ch∆∞a ƒë·ªçc t·ª´ database
    """
    return get_mails(account_id=account_id, top=top, skip=skip, is_read=False, db=db)

@app.get("/mails/search/")
def search_mails(
    account_id: int,
    query: str,
    top: Optional[int] = 10,
    skip: Optional[int] = 0,
    db: Session = Depends(get_db)
):
    """
    T√¨m ki·∫øm email theo t·ª´ kh√≥a trong database
    """
    try:
        # T√¨m ki·∫øm trong database
        emails = search_emails(db, account_id, query, skip, top)
        
        # Chuy·ªÉn ƒë·ªïi th√†nh dict ƒë·ªÉ serialize
        email_list = []
        for email in emails:
            email_dict = {
                "id": email.id,
                "message_id": email.message_id,
                "subject": email.subject,
                "from": {
                    "emailAddress": {
                        "address": email.from_email,
                        "name": email.from_name
                    }
                },
                "receivedDateTime": email.received_date_time.isoformat() if email.received_date_time else None,
                "isRead": email.is_read,
                "hasAttachments": email.has_attachments,
                "bodyPreview": email.body_preview,
                "importance": email.importance,
                "created_at": email.created_at.isoformat(),
                "updated_at": email.updated_at.isoformat()
            }
            email_list.append(email_dict)
        
        return JSONResponse({
            "emails": email_list,
            "total": len(email_list),
            "query": query,
            "skip": skip,
            "top": top
        })
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/mails/attachments/{message_id}")
def get_mail_attachments(
    account_id: int,
    message_id: str,
    db: Session = Depends(get_db)
):
    """
    L·∫•y danh s√°ch file ƒë√≠nh k√®m c·ªßa m·ªôt email
    """
    try:
        access_token = get_valid_access_token(db, account_id)
        
        headers = {
            "Authorization": f"Bearer {access_token}",
            "Content-Type": "application/json"
        }
        
        response = requests.get(
            f"{GRAPH_API_BASE}/me/messages/{message_id}/attachments",
            headers=headers
        )
        
        if response.status_code != 200:
            raise HTTPException(status_code=response.status_code, detail="Failed to fetch attachments")
        
        attachments = response.json()
        return JSONResponse(attachments)
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/status/{account_id}")
def get_auth_status(account_id: int, db: Session = Depends(get_db)):
    """
    Ki·ªÉm tra tr·∫°ng th√°i x√°c th·ª±c c·ªßa account
    """
    try:
        # Ki·ªÉm tra account c√≥ t·ªìn t·∫°i kh√¥ng
        account = get_account_by_id(db, account_id)
        if not account:
            return JSONResponse({"authenticated": False, "message": "Account not found"})
        
        # Ki·ªÉm tra token c√≥ h·ª£p l·ªá kh√¥ng
        auth_token = get_valid_auth_token(db, account_id)
        if not auth_token:
            return JSONResponse({"authenticated": False, "message": "No valid token found"})
        
        return JSONResponse({
            "authenticated": True,
            "account": {
                "id": account.id,
                "email": account.email,
                "name": account.name,
                "display_name": account.display_name
            },
            "token": {
                "expires_at": auth_token.expires_at.isoformat(),
                "expires_in": auth_token.expires_in,
                "is_active": auth_token.is_active
            },
            "message": "Token is valid"
        })
        
    except Exception as e:
        return JSONResponse({"authenticated": False, "message": str(e)})

@app.post("/init-db")
def init_database():
    """
    Kh·ªüi t·∫°o database v√† t·∫°o c√°c b·∫£ng
    """
    try:
        # Test k·∫øt n·ªëi database tr∆∞·ªõc
        with engine.connect() as connection:
            result = connection.execute("SELECT 1")
        
        # T·∫°o b·∫£ng
        create_tables()
        
        # Ki·ªÉm tra b·∫£ng ƒë√£ ƒë∆∞·ª£c t·∫°o
        with engine.connect() as connection:
            result = connection.execute("SELECT table_name FROM information_schema.tables WHERE table_schema = 'public'")
            tables = [row[0] for row in result]
        
        return JSONResponse({
            "message": "Database initialized successfully",
            "tables_created": tables,
            "total_tables": len(tables)
        })
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to initialize database: {str(e)}")

@app.get("/accounts")
def get_accounts(db: Session = Depends(get_db)):
    """
    L·∫•y danh s√°ch t·∫•t c·∫£ accounts
    """
    try:
        accounts = db.query(Account).filter(Account.is_active == True).all()
        account_list = []
        for account in accounts:
            account_dict = {
                "id": account.id,
                "email": account.email,
                "name": account.name,
                "display_name": account.display_name,
                "created_at": account.created_at.isoformat(),
                "updated_at": account.updated_at.isoformat()
            }
            account_list.append(account_dict)
        
        return JSONResponse({"accounts": account_list, "total": len(account_list)})
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/mails/sync-monthly/")
def sync_monthly_emails(
    account_id: int,
    db: Session = Depends(get_db)
):
    """
    ƒê·ªìng b·ªô email trong 1 th√°ng g·∫ßn nh·∫•t, chia nh·ªè t·ª´ng ng√†y ƒë·ªÉ kh√¥ng v∆∞·ª£t qu√° gi·ªõi h·∫°n 999 email/request.
    """
    try:
        today = datetime.utcnow().date()
        one_month_ago = today - timedelta(days=30)
        total_synced = 0
        total_days = 0
        details = []
        for i in range(31):
            day_from = one_month_ago + timedelta(days=i)
            day_to = day_from
            if day_from > today:
                break
            received_from = day_from.strftime('%Y-%m-%d')
            received_to = day_to.strftime('%Y-%m-%d')
            access_token = get_valid_access_token(db, account_id)
            headers = {
                "Authorization": f"Bearer {access_token}",
                "Content-Type": "application/json"
            }
            filters = [
                f"receivedDateTime ge {received_from}T00:00:00Z",
                f"receivedDateTime le {received_to}T23:59:59Z"
            ]
            filter_str = ' and '.join(filters)
            params = {
                "$top": 999,
                "$select": "id,subject,from,toRecipients,ccRecipients,bccRecipients,receivedDateTime,sentDateTime,isRead,hasAttachments,body,bodyPreview,importance,conversationId,conversationIndex,flag,categories,attachments",
                "$filter": filter_str
            }
            response = requests.get(
                f"{GRAPH_API_BASE}/me/messages",
                headers=headers,
                params=params
            )
            if response.status_code != 200:
                details.append({
                    "date": received_from,
                    "error": response.text
                })
                continue
            emails_data = response.json()
            synced_count = 0
            for email_data in emails_data.get("value", []):
                subject = email_data.get("subject", "")
                if subject.startswith("Your Meta ads receipt") or subject.startswith("Bi√™n lai qu·∫£ng c√°o Meta c·ªßa b·∫°n"):
                    email_id = email_data.get("id")
                    existing_email = db.query(Email).filter_by(account_id=account_id, message_id=email_id).first()
                    if existing_email:
                        continue
                    try:
                        create_email(db, account_id, email_data)
                        synced_count += 1
                    except Exception as e:
                        continue
            total_synced += synced_count
            total_days += 1
            details.append({
                "date": received_from,
                "synced": synced_count,
                "total_fetched": len(emails_data.get("value", []))
            })
        return JSONResponse({
            "message": f"ƒê·ªìng b·ªô th√†nh c√¥ng {total_synced} email trong {total_days} ng√†y",
            "total_synced": total_synced,
            "days_processed": total_days,
            "details": details
        })
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
