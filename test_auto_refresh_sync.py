"""
Script ƒë·ªÉ test auto refresh token tr∆∞·ªõc khi sync
"""
import sys
import os
from datetime import datetime, timedelta
from sqlalchemy.orm import Session
from sqlalchemy import and_

# Th√™m th∆∞ m·ª•c hi·ªán t·∫°i v√†o path ƒë·ªÉ import c√°c module
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database import SessionLocal
from models import Account, AuthToken
from app.services import EmailSyncService
from app.meta_receipt_service import MetaReceiptService
from app.auth import refresh_access_token

def test_auto_refresh_sync():
    """
    Test auto refresh token tr∆∞·ªõc khi sync
    """
    print("üîÑ TEST AUTO REFRESH TOKEN TR∆Ø·ªöC KHI SYNC")
    print("=" * 50)
    
    db = SessionLocal()
    try:
        current_time = datetime.utcnow()
        print(f"‚è∞ Th·ªùi gian hi·ªán t·∫°i: {current_time}")
        
        # L·∫•y t·∫•t c·∫£ accounts c√≥ token (k·ªÉ c·∫£ h·∫øt h·∫°n)
        accounts = db.query(Account).join(AuthToken).filter(
            and_(
                Account.is_active == True,
                AuthToken.is_active == True
            )
        ).all()
        
        print(f"üìä T√¨m th·∫•y {len(accounts)} accounts c√≥ token")
        
        if not accounts:
            print("‚ùå Kh√¥ng c√≥ account n√†o c√≥ token")
            return
        
        total_emails_synced = 0
        total_receipts_processed = 0
        refreshed_tokens = 0
        
        for account in accounts:
            try:
                print(f"\nüìß ƒêang x·ª≠ l√Ω account {account.id} ({account.email})...")
                
                # Ki·ªÉm tra token
                auth_token = db.query(AuthToken).filter(
                    and_(
                        AuthToken.account_id == account.id,
                        AuthToken.is_active == True
                    )
                ).first()
                
                if not auth_token:
                    print(f"‚ùå Account {account.id} kh√¥ng c√≥ token")
                    continue
                
                print(f"‚è∞ Token expires at: {auth_token.expires_at}")
                
                # Ki·ªÉm tra v√† refresh token n·∫øu c·∫ßn
                if auth_token.expires_at <= current_time:
                    print(f"üîÑ Token ƒë√£ h·∫øt h·∫°n, ƒëang refresh...")
                    try:
                        refresh_access_token(db, account.id)
                        refreshed_tokens += 1
                        print(f"‚úÖ Token ƒë√£ ƒë∆∞·ª£c refresh th√†nh c√¥ng")
                        
                        # L·∫•y token ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
                        updated_token = db.query(AuthToken).filter(
                            AuthToken.account_id == account.id
                        ).first()
                        print(f"‚è∞ Token m·ªõi expires at: {updated_token.expires_at}")
                    except Exception as e:
                        print(f"‚ùå L·ªói khi refresh token: {str(e)}")
                        continue
                else:
                    print(f"‚úÖ Token c√≤n h·ª£p l·ªá")
                
                # Th·ª±c hi·ªán daily sync
                sync_service = EmailSyncService(db, account.id)
                result = sync_service.sync_daily_emails()
                
                emails_synced = result['total_synced']
                total_emails_synced += emails_synced
                
                print(f"‚úÖ Daily sync ho√†n th√†nh: {emails_synced} emails m·ªõi")
                
                if emails_synced > 0:
                    # X·ª≠ l√Ω meta receipts cho emails m·ªõi
                    meta_service = MetaReceiptService(db)
                    meta_result = meta_service.process_account_emails(account.id)
                    
                    receipts_processed = meta_result['processed_count']
                    total_receipts_processed += receipts_processed
                    
                    print(f"üìÑ Meta receipts ƒë√£ x·ª≠ l√Ω: {receipts_processed} receipts")
                else:
                    print("‚ÑπÔ∏è Kh√¥ng c√≥ email m·ªõi")
                    
            except Exception as e:
                print(f"‚ùå L·ªói khi x·ª≠ l√Ω account {account.id}: {str(e)}")
                continue
        
        print(f"\nüìà T·ªïng k·∫øt:")
        print(f"  - Accounts ƒë√£ x·ª≠ l√Ω: {len(accounts)}")
        print(f"  - Tokens ƒë√£ refresh: {refreshed_tokens}")
        print(f"  - T·ªïng emails ƒë√£ sync: {total_emails_synced}")
        print(f"  - T·ªïng receipts ƒë√£ x·ª≠ l√Ω: {total_receipts_processed}")
        
    except Exception as e:
        print(f"‚ùå L·ªói chung: {str(e)}")
    finally:
        db.close()
    
    print("\n" + "=" * 50)
    print("‚úÖ Ho√†n th√†nh test auto refresh sync!")

if __name__ == "__main__":
    test_auto_refresh_sync() 