"""
Script ƒë·ªÉ ki·ªÉm tra chi ti·∫øt tr·∫°ng th√°i auto sync service
"""
import sys
import os
from datetime import datetime, timedelta
from sqlalchemy.orm import Session
from sqlalchemy import and_

# Th√™m th∆∞ m·ª•c hi·ªán t·∫°i v√†o path ƒë·ªÉ import c√°c module
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database import SessionLocal
from models import Account, AuthToken, Email, MetaReceipt
from app.auto_sync_service import auto_sync_service

def check_auto_sync_status():
    """
    Ki·ªÉm tra chi ti·∫øt tr·∫°ng th√°i auto sync service
    """
    print("üîç KI·ªÇM TRA TR·∫†NG TH√ÅI AUTO SYNC SERVICE")
    print("=" * 50)
    
    # 1. Ki·ªÉm tra tr·∫°ng th√°i service
    print("\nüìä Tr·∫°ng th√°i Auto Sync Service:")
    status = auto_sync_service.get_sync_status()
    print(f"  - ƒêang ch·∫°y: {status['is_running']}")
    print(f"  - Sync interval: {status['sync_interval']} gi√¢y")
    print(f"  - S·ªë account m·ªõi trong queue: {status['new_accounts_count']}")
    print(f"  - Danh s√°ch account m·ªõi: {status['new_accounts']}")
    
    # 2. Ki·ªÉm tra database
    db = SessionLocal()
    try:
        print("\nüìä Th·ªëng k√™ Database:")
        
        # ƒê·∫øm accounts
        total_accounts = db.query(Account).count()
        active_accounts = db.query(Account).filter(Account.is_active == True).count()
        print(f"  - T·ªïng s·ªë accounts: {total_accounts}")
        print(f"  - S·ªë accounts active: {active_accounts}")
        
        # ƒê·∫øm auth tokens
        total_tokens = db.query(AuthToken).count()
        valid_tokens = db.query(AuthToken).filter(
            and_(
                AuthToken.is_active == True,
                AuthToken.expires_at > datetime.utcnow()
            )
        ).count()
        print(f"  - T·ªïng s·ªë auth tokens: {total_tokens}")
        print(f"  - S·ªë tokens h·ª£p l·ªá: {valid_tokens}")
        
        # ƒê·∫øm emails
        total_emails = db.query(Email).count()
        print(f"  - T·ªïng s·ªë emails: {total_emails}")
        
        # ƒê·∫øm meta receipts
        total_receipts = db.query(MetaReceipt).count()
        print(f"  - T·ªïng s·ªë meta receipts: {total_receipts}")
        
        # 3. Ki·ªÉm tra chi ti·∫øt accounts
        print("\nüìã Chi ti·∫øt Accounts:")
        accounts = db.query(Account).all()
        
        if not accounts:
            print("  - Kh√¥ng c√≥ account n√†o trong database")
        else:
            for account in accounts:
                print(f"\n  üìß Account ID: {account.id}")
                print(f"    - Email: {account.email}")
                print(f"    - Name: {account.name}")
                print(f"    - Active: {account.is_active}")
                print(f"    - User ID: {account.user_id}")
                
                # Ki·ªÉm tra auth token
                auth_token = db.query(AuthToken).filter(
                    and_(
                        AuthToken.account_id == account.id,
                        AuthToken.is_active == True,
                        AuthToken.expires_at > datetime.utcnow()
                    )
                ).first()
                
                if auth_token:
                    print(f"    - ‚úÖ C√≥ token h·ª£p l·ªá (h·∫øt h·∫°n: {auth_token.expires_at})")
                    
                    # ƒê·∫øm emails c·ªßa account n√†y
                    account_emails = db.query(Email).filter(Email.account_id == account.id).count()
                    print(f"    - üìß S·ªë emails: {account_emails}")
                    
                    # ƒê·∫øm meta receipts c·ªßa account n√†y
                    account_receipts = db.query(MetaReceipt).filter(MetaReceipt.account_id == account.id).count()
                    print(f"    - üìÑ S·ªë meta receipts: {account_receipts}")
                    
                    # Ki·ªÉm tra email g·∫ßn nh·∫•t
                    latest_email = db.query(Email).filter(Email.account_id == account.id).order_by(Email.received_date_time.desc()).first()
                    if latest_email:
                        print(f"    - üìÖ Email g·∫ßn nh·∫•t: {latest_email.received_date_time}")
                else:
                    print(f"    - ‚ùå Kh√¥ng c√≥ token h·ª£p l·ªá")
        
        # 4. Ki·ªÉm tra th·ªùi gian
        print(f"\n‚è∞ Th·ªùi gian hi·ªán t·∫°i: {datetime.utcnow()}")
        print(f"üìÖ Ng√†y hi·ªán t·∫°i: {datetime.utcnow().date()}")
        
        # 5. Ki·ªÉm tra daily sync
        if hasattr(auto_sync_service, 'last_daily_sync_date'):
            print(f"üîÑ L·∫ßn daily sync g·∫ßn nh·∫•t: {auto_sync_service.last_daily_sync_date}")
            
            if auto_sync_service.last_daily_sync_date == datetime.utcnow().date():
                print("‚úÖ Daily sync ƒë√£ ch·∫°y h√¥m nay")
            else:
                print("‚è≥ Daily sync ch∆∞a ch·∫°y h√¥m nay")
        else:
            print("‚ùì Kh√¥ng th·ªÉ x√°c ƒë·ªãnh l·∫ßn daily sync g·∫ßn nh·∫•t")
        
        # 6. Ki·ªÉm tra emails g·∫ßn ƒë√¢y
        print(f"\nüìß Emails g·∫ßn ƒë√¢y (7 ng√†y qua):")
        week_ago = datetime.utcnow() - timedelta(days=7)
        recent_emails = db.query(Email).filter(Email.received_date_time >= week_ago).count()
        print(f"  - S·ªë emails trong 7 ng√†y qua: {recent_emails}")
        
        # 7. Ki·ªÉm tra meta receipts g·∫ßn ƒë√¢y
        print(f"\nüìÑ Meta receipts g·∫ßn ƒë√¢y (7 ng√†y qua):")
        recent_receipts = db.query(MetaReceipt).filter(MetaReceipt.date >= week_ago).count()
        print(f"  - S·ªë meta receipts trong 7 ng√†y qua: {recent_receipts}")
        
    except Exception as e:
        print(f"‚ùå L·ªói khi ki·ªÉm tra database: {e}")
    finally:
        db.close()
    
    print("\n" + "=" * 50)
    print("‚úÖ Ho√†n th√†nh ki·ªÉm tra!")

if __name__ == "__main__":
    check_auto_sync_status() 