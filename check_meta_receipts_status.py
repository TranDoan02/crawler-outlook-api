"""
Script ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i c·ªßa b·∫£ng meta_receipts
"""
import sys
import os
from datetime import datetime

# Th√™m th∆∞ m·ª•c hi·ªán t·∫°i v√†o path ƒë·ªÉ import c√°c module
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database import SessionLocal
from models import Email, MetaReceipt, Account
from sqlalchemy import func

def check_meta_receipts_status():
    """
    Ki·ªÉm tra tr·∫°ng th√°i c·ªßa b·∫£ng meta_receipts
    """
    db = SessionLocal()
    
    try:
        print("üìä KI·ªÇM TRA TR·∫†NG TH√ÅI META_RECEIPTS")
        print("="*50)
        
        # Th·ªëng k√™ t·ªïng quan
        total_emails = db.query(Email).count()
        total_receipts = db.query(MetaReceipt).count()
        
        print(f"üìß T·ªïng s·ªë emails: {total_emails}")
        print(f"üìã T·ªïng s·ªë meta_receipts: {total_receipts}")
        print(f"üìà T·ª∑ l·ªá convert: {(total_receipts/total_emails*100):.1f}%" if total_emails > 0 else "N/A")
        
        # Th·ªëng k√™ theo status
        print("\nüìà Th·ªëng k√™ theo status:")
        status_stats = db.query(MetaReceipt.status, func.count(MetaReceipt.id)).group_by(MetaReceipt.status).all()
        for status, count in status_stats:
            percentage = (count/total_receipts*100) if total_receipts > 0 else 0
            print(f"  - {status}: {count} ({percentage:.1f}%)")
        
        # Th·ªëng k√™ theo account
        print("\nüìä Th·ªëng k√™ theo account:")
        account_stats = db.query(
            MetaReceipt.account_id,
            func.count(MetaReceipt.id)
        ).group_by(MetaReceipt.account_id).all()
        
        for account_id, count in account_stats:
            # L·∫•y th√¥ng tin account
            account = db.query(Account).filter(Account.id == account_id).first()
            account_email = account.email if account else f"Account {account_id}"
            
            # ƒê·∫øm s·ªë emails c·ªßa account n√†y
            account_emails = db.query(Email).filter(Email.account_id == account_id).count()
            convert_rate = (count/account_emails*100) if account_emails > 0 else 0
            
            print(f"  - {account_email} (ID: {account_id}): {count} receipts / {account_emails} emails ({convert_rate:.1f}%)")
        
        # Th·ªëng k√™ theo ng√†y
        print("\nüìÖ Th·ªëng k√™ theo ng√†y (7 ng√†y g·∫ßn nh·∫•t):")
        from datetime import timedelta
        seven_days_ago = datetime.now().date() - timedelta(days=7)
        recent_receipts = db.query(
            func.date(MetaReceipt.created_at),
            func.count(MetaReceipt.id)
        ).filter(
            MetaReceipt.created_at >= seven_days_ago
        ).group_by(func.date(MetaReceipt.created_at)).order_by(func.date(MetaReceipt.created_at).desc()).all()
        
        for date, count in recent_receipts:
            print(f"  - {date}: {count} receipts")
        
        # Ki·ªÉm tra emails ch∆∞a ƒë∆∞·ª£c convert
        print("\nüîç Ki·ªÉm tra emails ch∆∞a ƒë∆∞·ª£c convert:")
        unconverted_emails = db.query(Email).outerjoin(
            MetaReceipt, 
            (Email.account_id == MetaReceipt.account_id) & (Email.message_id == MetaReceipt.message_id)
        ).filter(MetaReceipt.id.is_(None)).count()
        
        print(f"  - Emails ch∆∞a convert: {unconverted_emails}")
        
        if unconverted_emails > 0:
            print(f"  - C·∫ßn ch·∫°y script convert ƒë·ªÉ x·ª≠ l√Ω {unconverted_emails} emails c√≤n l·∫°i")
        else:
            print("  - ‚úÖ T·∫•t c·∫£ emails ƒë√£ ƒë∆∞·ª£c convert!")
        
        return {
            'total_emails': total_emails,
            'total_receipts': total_receipts,
            'unconverted_emails': unconverted_emails,
            'status_stats': dict(status_stats),
            'account_stats': dict(account_stats)
        }
        
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        return None
    
    finally:
        db.close()

def check_account_meta_receipts(account_id: int):
    """
    Ki·ªÉm tra chi ti·∫øt meta_receipts c·ªßa m·ªôt account
    """
    db = SessionLocal()
    
    try:
        print(f"üìä KI·ªÇM TRA META_RECEIPTS CHO ACCOUNT {account_id}")
        print("="*50)
        
        # L·∫•y th√¥ng tin account
        account = db.query(Account).filter(Account.id == account_id).first()
        if not account:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y account {account_id}")
            return None
        
        print(f"üìß Account: {account.email}")
        
        # Th·ªëng k√™ emails
        total_emails = db.query(Email).filter(Email.account_id == account_id).count()
        total_receipts = db.query(MetaReceipt).filter(MetaReceipt.account_id == account_id).count()
        
        print(f"üìß T·ªïng s·ªë emails: {total_emails}")
        print(f"üìã T·ªïng s·ªë meta_receipts: {total_receipts}")
        print(f"üìà T·ª∑ l·ªá convert: {(total_receipts/total_emails*100):.1f}%" if total_emails > 0 else "N/A")
        
        # Th·ªëng k√™ theo status
        print("\nüìà Th·ªëng k√™ theo status:")
        status_stats = db.query(MetaReceipt.status, func.count(MetaReceipt.id)).filter(
            MetaReceipt.account_id == account_id
        ).group_by(MetaReceipt.status).all()
        
        for status, count in status_stats:
            percentage = (count/total_receipts*100) if total_receipts > 0 else 0
            print(f"  - {status}: {count} ({percentage:.1f}%)")
        
        # Th·ªëng k√™ theo ng√†y
        print("\nüìÖ Th·ªëng k√™ theo ng√†y (7 ng√†y g·∫ßn nh·∫•t):")
        from datetime import timedelta
        seven_days_ago = datetime.now().date() - timedelta(days=7)
        recent_receipts = db.query(
            func.date(MetaReceipt.created_at),
            func.count(MetaReceipt.id)
        ).filter(
            MetaReceipt.account_id == account_id,
            MetaReceipt.created_at >= seven_days_ago
        ).group_by(func.date(MetaReceipt.created_at)).order_by(func.date(MetaReceipt.created_at).desc()).all()
        
        for date, count in recent_receipts:
            print(f"  - {date}: {count} receipts")
        
        # Ki·ªÉm tra emails ch∆∞a ƒë∆∞·ª£c convert
        unconverted_emails = db.query(Email).outerjoin(
            MetaReceipt, 
            (Email.account_id == MetaReceipt.account_id) & (Email.message_id == MetaReceipt.message_id)
        ).filter(
            Email.account_id == account_id,
            MetaReceipt.id.is_(None)
        ).count()
        
        print(f"\nüîç Emails ch∆∞a convert: {unconverted_emails}")
        
        return {
            'account_id': account_id,
            'account_email': account.email,
            'total_emails': total_emails,
            'total_receipts': total_receipts,
            'unconverted_emails': unconverted_emails,
            'status_stats': dict(status_stats)
        }
        
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        return None
    
    finally:
        db.close()

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description='Ki·ªÉm tra tr·∫°ng th√°i meta_receipts')
    parser.add_argument('--account-id', type=int, help='ID c·ªßa account c·ª• th·ªÉ (n·∫øu kh√¥ng c√≥ s·∫Ω ki·ªÉm tra t·∫•t c·∫£)')
    
    args = parser.parse_args()
    
    if args.account_id:
        result = check_account_meta_receipts(args.account_id)
    else:
        result = check_meta_receipts_status()
    
    if result:
        print("\n‚úÖ Ki·ªÉm tra ho√†n th√†nh!")
    else:
        print("\n‚ùå Ki·ªÉm tra th·∫•t b·∫°i!") 